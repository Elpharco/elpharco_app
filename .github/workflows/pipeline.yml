name: 'Terraform'

on:
  # workflow_dispatch:
  #   inputs:
  #     terraform_action:
  #       type: choice
  #       description: 'select terraform action'
  #       options:
  #       - apply
  #       - destroy
  #       required: true

  push:
    branches: [ "main" ]

jobs:
  terraform:
    name: 'Terraform'
    env:
      # AWS secrets
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ELPHARCO_KEYPAIR: ${{ secrets.ELPHARCO_KEYPAIR }}
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

    runs-on: ubuntu-latest
    environment: development

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan 

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # if: ${{ github.event.inputs.terraform_action == 'apply' }}
      run: terraform apply -auto-approve

    # - name: Terraform destroy
    #   if: ${{ github.event.inputs.terraform_action == 'destroy' }}
    #   run: terraform destroy -auto-approve




  
